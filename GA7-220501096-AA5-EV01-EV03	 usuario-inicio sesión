// Importación de módulos
const express = require("express");
const mysql = require("mysql");
const bcrypt = require("bcryptjs");
const bodyParser = require("body-parser");
const dotenv = require("dotenv");

dotenv.config();

// Configuración de Express
const app = express();
app.use(bodyParser.json());

// Conexión a la base de datos MySQL
const db = mysql.createConnection({
    host: "localhost",
    user: "root", // Usuario por defecto de XAMPP
    password: "", // Contraseña vacía por defecto
    database: "authDB"
});

db.connect(err => {
    if (err) throw err;
    console.log("Conectado a la base de datos MySQL.");
});

// Ruta para registrar un usuario
app.post("/register", (req, res) => {
    const { username, password } = req.body;

    // Cifrar la contraseña antes de guardarla
    bcrypt.hash(password, 10, (err, hashedPassword) => {
        if (err) return res.status(500).json({ error: "Error al cifrar la contraseña" });

        const query = "INSERT INTO users (username, password) VALUES (?, ?)";
        db.query(query, [username, hashedPassword], (err, result) => {
            if (err) return res.status(500).json({ error: "Error al registrar usuario" });

            res.status(201).json({ message: "Usuario registrado correctamente" });
        });
    });
});

// Ruta para iniciar sesión
app.post("/login", (req, res) => {
    const { username, password } = req.body;

    const query = "SELECT * FROM users WHERE username = ?";
    db.query(query, [username], (err, results) => {
        if (err) return res.status(500).json({ error: "Error en el servidor" });

        if (results.length === 0) return res.status(401).json({ error: "Usuario no encontrado" });

        // Comparar contraseñas
        bcrypt.compare(password, results[0].password, (err, isMatch) => {
            if (err) return res.status(500).json({ error: "Error en la autenticación" });

            if (!isMatch) return res.status(401).json({ error: "Contraseña incorrecta" });

            res.status(200).json({ message: "Autenticación satisfactoria" });
        });
    });
});

// Iniciar el servidor en el puerto 3000
app.listen(3000, () => {
    console.log("Servidor ejecutándose en http://localhost:3000");
});
