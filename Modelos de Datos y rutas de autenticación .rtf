{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // config/db.js\
const mongoose = require('mongoose');\
\
const connectDB = async () => \{\
    try \{\
        await mongoose.connect(process.env.MONGO_URI, \{\
            useNewUrlParser: true,\
            useUnifiedTopology: true,\
        \});\
        console.log('MongoDB conectado');\
    \} catch (error) \{\
        console.error('Error conectando a MongoDB', error);\
        process.exit(1);\
    \}\
\};\
\
module.exports = connectDB;\
\
// models/User.js\
const \{ Schema, model \} = require('mongoose');\
const bcrypt = require('bcryptjs');\
\
const UserSchema = new Schema(\{\
    username: \{ type: String, required: true, unique: true \},\
    password: \{ type: String, required: true \},\
\});\
\
UserSchema.pre('save', async function (next) \{\
    if (!this.isModified('password')) return next();\
    const salt = await bcrypt.genSalt(10);\
    this.password = await bcrypt.hash(this.password, salt);\
    next();\
\});\
\
module.exports = model('User', UserSchema);\
\
// routes/authRoutes.js\
const express = require('express');\
const bcrypt = require('bcryptjs');\
const jwt = require('jsonwebtoken');\
const User = require('../models/User');\
\
const router = express.Router();\
\
router.post('/register', async (req, res) => \{\
    try \{\
        const \{ username, password \} = req.body;\
        const user = new User(\{ username, password \});\
        await user.save();\
        res.status(201).json(\{ message: 'Usuario registrado' \});\
    \} catch (error) \{\
        res.status(400).json(\{ error: 'Error en el registro' \});\
    \}\
\});\
\
router.post('/login', async (req, res) => \{\
    try \{\
        const \{ username, password \} = req.body;\
        const user = await User.findOne(\{ username \});\
        if (!user || !(await bcrypt.compare(password, user.password))) \{\
            return res.status(401).json(\{ error: 'Autenticaci\'f3n fallida' \});\
        \}\
        const token = jwt.sign(\{ id: user._id \}, process.env.JWT_SECRET, \{ expiresIn: '1h' \});\
        res.json(\{ message: 'Autenticaci\'f3n exitosa', token \});\
    \} catch (error) \{\
        res.status(500).json(\{ error: 'Error en el servidor' \});\
    \}\
\});\
\
module.exports = router;\
\
// server.js\
require('dotenv').config();\
const express = require('express');\
const connectDB = require('./config/db');\
const authRoutes = require('./routes/authRoutes');\
\
const app = express();\
app.use(express.json());\
\
connectDB();\
\
app.use('/api/auth', authRoutes);\
\
const PORT = process.env.PORT || 5000;\
app.listen(PORT, () => console.log(`Servidor corriendo en el puerto $\{PORT\}`));\
}